# -*- coding: utf-8 -*-
"""Homework#4_CSchuler_Problem#2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tKXtr1sdqDu4NVwZP8cLpBRz6ARVdAI_
"""

import pandas as pd

# Load the dataset
df = pd.read_csv('/content/drive/MyDrive/DATA/diabetes_train.csv')

print(df.head())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# Separate features and target
X = df.drop(columns='class')
y = df['class']

# Reserve last 10 rows for testing
X_train, X_test = X.iloc[:-10], X.iloc[-10:]
y_train, y_test = y.iloc[:-10], y.iloc[-10:]

# Scale the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# SVM with RBF kernel
svm_model = SVC(kernel='rbf')
svm_model.fit(X_train_scaled, y_train)

# Predict on the test set
y_pred = svm_model.predict(X_test_scaled)

# Evaluate performance
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred, output_dict=False)

accuracy, conf_matrix, class_report

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import roc_curve, auc
from sklearn.preprocessing import LabelEncoder

# Confusion matrix
plt.figure(figsize=(6, 5))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['tested_negative', 'tested_positive'],
            yticklabels=['tested_negative', 'tested_positive'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Encode labels for ROC curve
le = LabelEncoder()
y_test_encoded = le.fit_transform(y_test)  # tested_negative=0, tested_positive=1

# Decision function scores for ROC
y_scores = svm_model.decision_function(X_test_scaled)

# Compute ROC curve and AUC
fpr, tpr, _ = roc_curve(y_test_encoded, y_scores)
roc_auc = auc(fpr, tpr)

# ROC curve
plt.figure(figsize=(6, 5))
plt.plot(fpr, tpr, color='darkorange', label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive')
plt.ylabel('True Positive')
plt.title('Diabetes ROC Curve')
plt.legend(loc='lower right')
plt.grid(True)
plt.show()